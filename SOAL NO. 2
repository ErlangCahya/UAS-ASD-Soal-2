import java.util.*;

class hashTableKu {
    private ArrayList<ArrayList<String>> table;
    private int size;

    public hashTableKu(int size) {
        this.size = size;
        table = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            table.add(new ArrayList<>());
        }
    }

    private int rumusHashTable(String key) {
        long hashValue = 0;
        for (char c : key.toCharArray()) {
            hashValue = (hashValue * 31 + c) % size;
        }
        return (int) hashValue;
    }
    
    
    public void insert(String key) {
        int index = rumusHashTable(key);
        ArrayList<String> bucket = table.get(index);
        if (!bucket.contains(key)) {
            bucket.add(key);
        }
    }

    public ArrayList<String> getKeys() {
        ArrayList<String> keys = new ArrayList<>();
        for (ArrayList<String> bucket : table) {
            keys.addAll(bucket);
        }
        return keys;
    }
}


public class MAIN {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        hashTableKu hashTable = new hashTableKu(5000);

        System.out.println("Masukkan paragraf (akhiri dengan baris kosong):");
        StringBuilder paragraphBuilder = new StringBuilder();

        while (true) {
            String line = scanner.nextLine();
            if (line.isEmpty()) {
                break;
            }
            paragraphBuilder.append(line).append(" ");
        }

        String paragraph = paragraphBuilder.toString();
        scanner.close();
        
        String[] words = paragraph.toLowerCase().split("\\W+");
        
        
        int wordCount = 0;
        int maxWord = 5000;
        
        for (String word : words) {
            if (!word.isEmpty()) {
                if(wordCount>=maxWord) {
                    break;
                }
                hashTable.insert(word);
                wordCount++;
            }
        }

        ArrayList<String> sortedWords = hashTable.getKeys();
        Collections.sort(sortedWords);

        for (String word : sortedWords) {
            System.out.println(word);
        }
    }
}
